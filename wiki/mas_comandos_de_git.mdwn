#Mas comandos de git

Como obtener información desde mi git
--------------------------------------


### Revisión de la bitácora de cambios

Para obtener información respecto a la bitácora podemos hacer:

    git log

    commit db67fa8802c869ff0321fc957fe4b71c14e9bad2  
    Author: git version control git@server.org  
    Date:   Wed Jul 21 21:40:26 2010 +0000   
        comentario sobre este cambio

Esto te mostrara una lista de todos los cambios al repositorio de **git**. Cada cambio es listado por un numero hash que identifica si el dicho cambio ha ha sido comprometido. Incluye el nombre del autor, la fecha y hora del cambio y el mensaje que fue incluido por el autor.

Para ver la ultima bitacola(`HEAD`) podemos hacer:

    git log -1

###Bitacolas cortas y formatos

En ocaciones es muy util revisar las bitacolas, enlistados por usuarios y los mensajes de sus commit's. esto lo podemos hacer con la opción `shortlog`:

	git shortlog

Para ver los ultimos `3` commits podemos hacer:

	git shortlog -3

Una opcion quizas mas util es dar formato a los logs para que nos muestre lo que deseamos por ejemplo, para mostrar lista simple de `hashes` sus respectivos comentarios.

	git log --pretty=oneline

De igual forma para mostrar los ultimos 3 podemos hacer: `git log --pretty=oneline -3`

### Mostrando estadísticas del G1+

Modemos mostrar estadisticas de los cambios que se van realizando:

	git log --stat

Para mostrar las estadisticas de los ultimos 3 cambios podemos hacer:

	git log --stat -3

Esto mostrara una salida con tres segmentos de commits similares a:

	commit fd0e4486b523e191385872535e6b350e0123d4f
	Author: fitorec <miEmail@servidor-mails.net>
	Date:   Mon Jun 13 11:10:37 2011 -0500

		Descripcion de mi comit

	 /contenidos/mas-comandos-git.md             |    10 ++++++++++
	 .../places/{flujos-mono.jpg => flujos-mono-nuevo.jpg}   |  Bin 27979 -> 27979 bytes
	 enOaxaca/contenidos/pages/algun-archivo.md |    2 -+
	 3 files changed, 11 insertions(+), 1 deletions(-)


La primer linea describe el _hash del commit_, la segunda describe el contribuidor, la tercera indica la fecha y hora de dicho commit, la linea entre saltos de lineas nos muestra la descripcion, en la parte inferior la descripcion de las modificaciones realidadas donde:

**Se agregaron 10 lineas al archivo mas-comandos-git.md**

	 /contenidos/mas-comandos-git.md             |    10 ++++++++++

**Se renombro la imagenflujos-mono.jpg por flujos-mono-nuevo.jpg **

	 .../places/{flujos-mono.jpg => flujos-mono-nuevo.jpg}   |  Bin 27979 -> 27979 bytes

**Se borro y agrego una linea en algun-archivo.md **

	 enOaxaca/contenidos/pages/algun-archivo.md |    2 -+

**Al final de la parte inferior:**

	 3 files changed, 11 insertions(+), 1 deletions(-)

Nos indica que se modificaron 3 archivos, se insertaron 11lineas y se borro 1 linea.

### Graficacando los cambios.

Podemos graficar los cambios de los brazos o ramas(branch) del como van cambiando conforme vallamos trabajando por ejemplo:

    git log --graph --oneline --all


### Ver la diferencia entre dos versiones:

    git diff x7saz db67f

### opción 2
    git whatchanged x7saz db67f

Donde __db67__ corresponde a las primeras cuantos caracteres del HASH del commit mostrado arriba en la bitácora de git (el **HASH** completo siendo __db67fa8802c869ff0321fc957fe4b71c14e9bad2__) y __x7saz__ es los primeros cuatro caracteres del **HASH** de un commit anterior. Suena complicado pero no lo  es. Con __git log__ obtengamos toda la información necesaria. 

### Cambiar nombre de autor y correo asociado con tus cambios

	git config user.email "yo@server.org"
	git config user.name "yo"  

### Configurando colores para ver las diferencias.

	git config --global color.diff.old red
	git config --global color.diff.new green
	git config --global color.diff.func magenta

### Configurar plantillas

Creando una plantilla para nuestros cambios:
	
	git config --global commit.template $HOME/.config/git/plantilla_commit.txt
	touch $HOME/.config/git/plantilla_commit.txt

### Deshacer

[[!template  id=note text="""Para deshacer el cambio mas recien al index `git reset --hard HEAD`"""]]

[[!template  id=note text="""Para deshacer el ultimo commit: `git revert HEAD`"""]]


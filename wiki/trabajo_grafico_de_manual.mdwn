[[!meta stylesheet=estilo-codigos rel="stylesheet" title="estilo-codigos"]]

Respecto a la optimización de imágenes para la web imagenes se encuentran en:

<http://flujos.org/images/flujos-vivos/>

##optimización de imagenes

Por lo general son muy grandes para el uso en la web. Es recomendable reducirlas de tamaño y optimizarlas. Se puede utilizar el imagemagic para este objetivo. El tamaño original de **Chango en playa.png es 1.3M. El tamaño resultante, <b>Chango en playa-900px.png</b>, es de 72K. Es una muy gran diferencia. El resulto si logro por reducir el tamaño del imagen a un ancho de 900px, igual al ancho del cuerpo del manual, y un reducion a unicamente los 7 colores realmente existentes en el imagen: 

    convert -resize 900 -posterize 7 +dither Chango\ en\ playa.png Chango\ en\ playa-900px.png 

###Opciones del convert útiles para la optimización.
 - **-posterize** número de colores(indexado).
 - **-resize**   redimencionado (anchoXalto en pixeles).
 - **-quality** Calidad expresado en un rango de 0-100.

Otra opción es usar formato jpg ya que son mas ligeras y 'jugar' con el parámetro de la calidad(-quality) en combinación con el redimencionamiento(-resize).

**Mas ejemplos**
> Hacer una copia todas las imágenes y generar sus respectivas imágenes pequeñas(-resize 110x150) para avatar, de la carpeta actual en donde nos interesan las que se encuentran en formato _jpg_, además reducimos 50% la calidad (-quality), respecto a la orinal.
las instrucciones podrían ser:

    #creamos una con el nombre avatars
    mkdir avatars
    #
    for img in *.jpg
    do
        convert $img -resize 110x150 -strip -quality 50 -interlace line ./avatars/$img
    done

>Si queremos un avatar con otras características p.e. ejemplo un tamaño de 220x300 y ahora una calidad del 80,esto lo podemos hacer con mover a los parámetros _resize_ , _quality_ del convert respectivamente. Por otra parte podemos renombrar y/o cambiar el nombre/directorio destino dentro del ciclo _for_, en este caso vamos agregarle \_avatar al final del nombre de cada imagen.

    #directorio que vamos a utilizar para almacenar las imgs
    export path='./directorio_destino/'
    #
    for img in *jpg
    do
    	echo $img
    	img=`echo $img | cut -c-4`
    	src=$path/$img\_src.jpg
    	mini=$path/$img\_avatar.jpg
    	cp $img.JPG $src
    	convert $src -resize 220x300 -strip -quality 80 -interlace line $mini
    done

>Para re-dimensionar masivamente *p.e.* todos los directorios de forma recursiva, esto se podría hacer con un find bajo una con una expresión regular(-iregex).

    for img in $(find ./ -iregex ".*\(jpg\|png\|gif\)$")
    do
        echo $img
        #código re dimensionamiento.
        #o alguna otra accion p.e borrar el archivo
        #rm $img
    done

##Uso de nombres mas semánticos.

Es buena practica re-nombrar a los archivos tal que estos tengan un significado semántico. Los navegadores suelen sustituir en las  _URLs_ los espacios en blanco por `%20` lo cual en ocasiones genera _URLs_ difíciles de entender a simple vista, para evitar esto podemos renombrar todos(general `/g`) espacios en blanco de los archivos de una carpeta por el símbolo guión bajo (\_).

    rename 's/\s+/_/g' *

En Internet se entiende que se trata de enfatizar cuando se escribe en mayúsculas(similar a GRITAR!!), por tal razón se recomienda usar en la menor medida frases en mayúsculas(USAR SÓLO CUANDO SEA NECESARIO), si tenemos imágenes con estos caracteres tanto en el nombre de los archivos como en las extensiones p.e. Chango_escuchando_musica.JPG, ALGO.svg,etc.PNG; las podemos renombrar al vuelo con:

    rename 'y/a-z/A-Z/' *

Si desea modificar solo los archivos JPG por jpg usted puede:

    rename 's/\.JPG$/.jpg/g' *.JPG

Si deseas jugar con **rename** sin alterar los archivos puedes usar las opciones **-n** para no modificar los archivos y **-v** para que muestre lo que realizara(modo verbose), por ejemplo el ejemplo anterior lo podemos ejecutar como:

    rename -nv 's/\.JPG$/.jpg/g' *.JPG

Finalmente trate de evitar en la medida posible caracteres especiales(como acentos, la letras: `ñ`, ü;, etc.) y tampoco use nombres como 001.png, 002.png, etc.., hay que ponerle chispa a los nombres :)

##css
como hacemos por diferenciar las imágenes entre paginas? un distinto fondo para cada pagina, por ejemplo...

los meta tags de ikiwiki quizas nos servirá. al poner el siguiente tag en index.html del manual, ikiwiki incluirá el enlace hasta la hoja de estilo <b>navigacion.css</b>

        \[[!meta stylesheet=navegacion rel="stylesheet" title="navegacion"]]


luego toca a uno creer el fichero navigacion.css en la carpeta.
